1463. Cherry Pickup II
You are given a rows x cols matrix grid representing a field of cherries where grid[i][j] represents the number of cherries that you can collect from the (i, j) cell.
You have two robots that can collect cherries for you:
Robot #1 is located at the top-left corner (0, 0), and
Robot #2 is located at the top-right corner (0, cols - 1).
Return the maximum number of cherries collection using both robots by following the rules below:

From a cell (i, j), robots can move to cell (i + 1, j - 1), (i + 1, j), or (i + 1, j + 1).
When any robot passes through a cell, It picks up all cherries, and the cell becomes an empty cell.
When both robots stay in the same cell, only one takes the cherries.
Both robots cannot move outside of the grid at any moment.
Both robots should reach the bottom row in grid.
 
Example 1:

Input: grid = [[3,1,1],[2,5,1],[1,5,5],[2,1,1]]
Output: 24
Explanation: Path of robot #1 and #2 are described in color green and blue respectively.
Cherries taken by Robot #1, (3 + 2 + 5 + 2) = 12.
Cherries taken by Robot #2, (1 + 5 + 5 + 1) = 12.
Total of cherries: 12 + 12 = 24.

class Solution:
    def cherryPickup(self, grid: List[List[int]]) -> int:
        n = len(grid)
        m = len(grid[0])
        dp = [[[0] * m for _ in range(m)] for _ in range(n)]
        
        # Initialize the DP array for the last row
        for j1 in range(m):
            for j2 in range(m):
                if j1 == j2:
                    dp[n - 1][j1][j2] = grid[n - 1][j1]
                else:
                    dp[n - 1][j1][j2] = grid[n - 1][j1] + grid[n - 1][j2]
        
        # Dynamic Programming
        for i in range(n - 2, -1, -1):
            for j1 in range(m):
                for j2 in range(m):
                    maxi = float('-inf')
                    
                    # Inner loops for 9 possible moves
                    for di in range(-1, 2):
                        for dj in range(-1, 2):
                            ans = 0
                            if j1 == j2:
                                ans = grid[i][j1]
                            else:
                                ans = grid[i][j1] + grid[i][j2]
                            
                            # Check if the move is valid
                            if j1 + di < 0 or j1 + di >= m or j2 + dj < 0 or j2 + dj >= m:
                                ans += float('-inf') # Invalid move
                            else:
                                ans += dp[i + 1][j1 + di][j2 + dj] # Include the DP result from the next row
                            
                            maxi = max(ans, maxi) # Update maximum result
                    dp[i][j1][j2] = maxi # Store the maximum result for this state in the DP array
        
        # Return the maximum cherries collected
        return dp[0][0][m - 1]
